// OOP_Lesson_5.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
using namespace std;



//==================================================================================================================
// Задание 1.
//  Реализовать шаблон класса Pair1, который позволяет пользователю передавать данные одного типа парами.
//==================================================================================================================class PAIR

template <class T>
class Pair1
{
private:
    T x, y;

public:

    Pair1(T x, T y) : x(x), y(y)
    {};
    ~Pair1()
    {};
    T getX() const
    {
        return x;
    };

    T getY() const
    {
        return y;
    };
 
  

};


//==================================================================================================================
// Задание 2.
//  Реализовать класс Pair, который позволяет использовать разные типы данных в передаваемых парах.
//==================================================================================================================

template <class T, class S>
class Pair 
{
private:
    T x;
    S y;

public:

    Pair(T x, S y) : x(x), y(y)
    {};
    ~Pair()
    {};

    T getX() const
    {
        return x;
    };

    S getY() const
    {
        return y;
    };

};

template <class U>  // частичная специализация класса Pair // класс StringValuePair, этот шаблон класса должен наследовать частично специализированный класс Pair, в котором первый параметр — string, а второй — любого типа данных.
class Pair <string, U>  
{
private:
    string x;
    U y;

public:

    Pair(string x, U y) : x(x), y(y)
    {};
    ~Pair()
    {};
    string getX() const
    {
        return x;
    };

    U getY() const
    {
        return y;
    };
   
};


//==================================================================================================================
// Задание 3.
//  Написать шаблон класса StringValuePair, в котором первое значение всегда типа string, а второе — любого типа. 
//  Этот шаблон класса должен наследовать частично специализированный класс Pair, в котором первый параметр — string, а второй — любого типа данных.
//==================================================================================================================

template <class T> // 
class StringValuePair : public Pair  <string, int>
{
private: 
  
public:
      
        StringValuePair(string Str, T x) : Pair (Str,  x)
        {};
        ~StringValuePair()
        {};
     
};






int main()
{
  //==================================================================================================================
  // Задание 1.
    Pair1<int> p1(6, 9);
    cout << "Pair: " << p1.getX() << ' ' << p1.getY() << endl;
    const Pair1<double> p2(3.4, 7.8);
    cout << "Pair: " << p2.getX() << ' ' << p2.getY() << endl;
    cout << "------------------" << endl;
    cout << endl;

    

   //==================================================================================================================
   // Задание 2.

    Pair<int, double> p3(6, 7.8);
    cout << "Pair: " << p3.getX() << ' ' << p3.getY() << endl;
    const Pair<double, int> p4(3.4, 5);
    cout << "Pair: " << p4.getX() << ' ' << p4.getY() << endl;
    cout << "------------------" << endl;
    cout << endl;
 

    //Pair<string, int> svp("Amazing", 7);
   // cout << "Pair: " << svp.getX() << ' ' << svp.getY() << endl;

    StringValuePair<int> svp("Amazing", 7);
    cout << "Pair: " << svp.getX() << ' ' << svp.getY() << endl;

}


