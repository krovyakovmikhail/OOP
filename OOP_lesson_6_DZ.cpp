// OOP_lesson_6_DZ.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <string>
#include <sstream>
using namespace std;


//=======================================================================================================
// Задание 1.
// Создать программу, которая считывает целое число типа int. И поставить «защиту от дурака»: если пользователь вводит что-то кроме одного целочисленного значения, 
// нужно вывести сообщение об ошибке и предложить ввести число еще раз. Пример неправильных введенных строк:

bool Checking_the_entered_value(string value)
{
	for (size_t i = 0; i < value.length(); ++i)
	{
		bool R;
		R = isdigit(value[i]);
		if (R == false)
		{
			return false;
			break;
		}
			
	}

	return true;

};
//===========================================================================================================
// Задание 2.
// Создать собственный манипулятор endll для стандартного потока вывода, который выводит два перевода строки и сбрасывает буфер.
class endll
{
public:
	friend ostream& operator << (ostream& out, const endll& endll)
	{
		out << "\n" << "\n" << flush; // Если я все правильно понял то очистка буфера вывода должна происходить через функцию flush(). т.е. в этой строке, перегружая оператор << помещаем два символа новой строки и очистку буфера.
										
		// out <<  "\n" << endl;   - можно реализовать таким образом: перевод строки , затем перевод строки + очистка (поскольку endl содержит в себе очистку буфера)
		return out;
	};
};




int main()
{
	//=======================================================================================================
	// Задание 1.
	bool check;
	while (1)
	{
		string x;
		
		cout << "enter an integer: ";

		getline(cin, x);

		check=Checking_the_entered_value(x);
		if (check == true)
			break;
	}


	//=======================================================================================================
	// Задание 2.
	endll endll;

	cout << "123" << endll;
	cout << "321";


}

